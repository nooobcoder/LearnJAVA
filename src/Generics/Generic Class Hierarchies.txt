Generic Class Hierarchies

Generic classes can be part of a class hierarchy in just the same way as a non-generic class. Thus, a generic class can act as a superclass or be a subclass. Thekey difference between generic and non-generic hierarchies is that in a generichierarchy, any type arguments needed by a generic superclass must be passedup the hierarchy by all subclasses. This is similar to the way that constructorarguments must be passed up a hierarchy.Using a Generic SuperclassHere is a simple example of a hierarchy that uses a generic superclass:

// A simple generic class hierarchy
class GenericSuper<T> {
    T ob;

    GenericSuper(T ob) {
        this.ob = ob;
    }

    // Return ob
    T getOb() {
        return ob;
    }
}

// A sub-class of GenericSuper
class GenericSub<T> extends GenericSuper<T> {
    GenericSub(T ob) {
        super(ob);
    }
}

In this hierarchy, Gen2 extends the generic class Gen. Notice how Gen2 isdeclared by the following line:class Gen2<T> extends Gen<T> {The type parameter T is specified by Gen2 and is also passed to Gen in theextends clause. This means that whatever type is passed to Gen2 will also bepassed to Gen. For example, this declaration,Gen2<Integer> num = new Gen2<Integer>(100);passes Integer as the type parameter to Gen. Thus, the ob inside the Genportion of Gen2 will be of type Integer.Notice also that Gen2 does not use the type parameter T except to supportthe Gen superclass. Thus, even if a subclass of a generic superclass wouldotherwise not need to be generic, it still must specify the type parameter(s)required by its generic superclass.Of course, a subclass is free to add its own type parameters, if needed. Forexample, here is a variation on the preceding hierarchy in which Gen2 adds a
type parameter of its own:

class GenericSub<T, V>

Notice the declaration of this version of Gen2, which is shown here:
class Gen2<T, V> extends Gen<T> {Here, T is the type passed to Gen, and V is the type that is specific to Gen2. Vis used to declare an object called ob2, and as a return type for the methodgetob2( ). In main( ), a Gen2 object is created in which type parameter T isString, and type parameter V is Integer. 



Generic Subclass
It is perfectly acceptable for a non-generic class to be the superclass of ageneric subclass. For example, consider this program:


// A non-generic super class which is extended by it's generic sub class below
class GenericSuper2 {
    int val = 0;

    GenericSuper2(int val) {
        this.val = val;
    }

    int getNum() {
        return this.val;
    }
}

// A generic sub class
class GenericSubclass2<T> extends GenericSuper2 {
    T ob;

    GenericSubclass2(T ob, int num) {
        super(num);
        this.ob = ob;
    }

    T getSubOb() {
        return this.ob;
    }
}

public class GenericSubclass {
    public static void main(String[] args) {
        GenericSubclass2<String> obj = new GenericSubclass2<String>("The value is: ", 42);
        System.out.println(obj.getSubOb() + " " + obj.getNum());
        System.out.println();
    }
}


>> Run-Time Type Comparisons Within a GenericHierarchy

instanceof determines if an object is an instance of aclass. It returns true if an object is of the specified type or can be cast to thespecified type. The instanceof operator can be applied to objects of genericclasses. The following class demonstrates some of the type compatibilityimplications of a generic hierarchy:

package Generics;

class GenericSuper3<T> {
    T obj;

    GenericSuper3(T obj) {
        this.obj = obj;
    }

    T getOb() {
        return this.obj;
    }
}

class GenericSubclass3<T> extends GenericSuper3<T> {
    GenericSubclass3(T ob) {
        super(ob);
    }
}

public class InstanceOfGenericHierarchy {
    public static void main(String[] args) {
        GenericSuper3<Integer> a = new GenericSuper3<>(22);
        GenericSubclass3<Integer> b = new GenericSubclass3<>(33);
        GenericSubclass3<String> c = new GenericSubclass3<>("String value");

        System.out.println("b instance of Sub class?  " + (b instanceof GenericSubclass3<?>));
        System.out.println("b instance of Super class?  " + (b instanceof GenericSuper3<?>));
        System.out.println();

        System.out.println("c instance of Sub class?  " + (c instanceof GenericSubclass3<?>));
        System.out.println("c instance of Super class?  " + (c instanceof GenericSuper3<?>));
        System.out.println();

        System.out.println("a instance of Sub class?  " + (a instanceof GenericSubclass3<?>));
        System.out.println("a instance of Super class?  " + (a instanceof GenericSuper3<?>));
        System.out.println();

        System.out.println("a instance of Sub class?  " + (a instanceof GenericSubclass3<?>));
        System.out.println("a instance of Super class?  " + (a instanceof GenericSuper3<?>));
        System.out.println();

        System.out.println((b instanceof GenericSubclass3<Integer>));
        // System.out.println((c instanceof GenericSubclass3<Integer>)); // This would cause a compile-time error
        System.out.println();

        System.out.println();
    }
}


Casting

You can cast one instance of a generic class into another only if the two areotherwise compatible and their type arguments are the same. For example,assuming the foregoing program, this cast is legal:(Gen<Integer>) iOb2 // legalbecause iOb2 includes an instance of Gen<Integer>. But, this cast:(Gen<Long>) iOb2 // illegal

is not legal because iOb2 is not an instance of Gen<Long>.


Bridge Methods
Occasionally, the compiler will need to add a bridge method to a class tohandle situations in which the type erasure of an overriding method in asubclass does not produce the same erasure as the method in the superclass. Inthis case, a method is generated that uses the type erasure of the superclass, andthis method calls the method that has the type erasure specified by the subclass.Of course, bridge methods only occur at the bytecode level, are not seen byyou, and are not available for your use.Although bridge methods are not something that you will normally need tobe concerned with, it is still instructive to see a situation in which one isgenerated. Consider the following program:
